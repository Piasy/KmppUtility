plugins {
    id 'org.jetbrains.kotlin.multiplatform'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

def hostOs = System.getProperty("os.name")
def isMacOS = hostOs == "Mac OS X"
def isLinux = hostOs == "Linux"
def isWindows = hostOs.startsWith("Windows")

if (isMacOS) {
    // although apply is the old way, we can't use the new way inside if block :(
    apply plugin: 'com.android.library'
}

if (isMacOS) {
    android {
        compileSdkVersion androidCompileSdkVersion
        defaultConfig {
            minSdkVersion androidMinSdkVersion
        }
        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
            }
        }

        sourceSets.test.java.srcDirs = ['src/androidTest/kotlin',]
        testOptions {
            unitTests.all {
                testLogging {
                    events 'started', 'passed', 'skipped', 'failed'
                }
                // only include RobolectricTest, tests under commonTest aren't annotated with
                // `@RunWith(RobolectricTestRunner::class)`, so it will fail with XXX not mocked.
                options {
                    includeCategories 'com.piasy.test.RobolectricTest'
                }
            }
            unitTests {
                includeAndroidResources = true
            }
        }
    }

    // only used for Android Test dependencies
    dependencies {
        testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
        testImplementation 'org.robolectric:robolectric:4.3'
    }
}

kotlin {
    if (isMacOS) {
        android("android")

        targets {
            def buildForDevice = project.findProperty("device")?.toBoolean() ?: false
            def iosPreset = (buildForDevice) ? presets.iosArm64 : presets.iosX64
            fromPreset(iosPreset, 'ios') {
                compilations.main.cinterops {
                    NativeBase64 {
                        defFile "${rootProject.projectDir}/KmppBase64/src/iosMain/cinterop/NativeBase64.def"
                        includeDirs {
                            allHeaders "${rootProject.projectDir}/NativeBase64/iOS/wrapper"
                        }
                        // all of them will fail with "Undefined symbols" error
                        //linkerOpts "-L/Users/piasy/src/Kotlin/KmppUtility/libs/NativeBase64/iOS/", "-lNativeBase64"
                        //linkerOpts "-L${rootProject.projectDir}/libs/NativeBase64/iOS/ -lNativeBase64"
                        linkerOpts "-L${rootProject.projectDir}/libs/NativeBase64/iOS/", "-lNativeBase64"
                    }
                }

                binaries {
                    framework {
                        baseName = "KmppBase64"
                        embedBitcode("disable")
                    }
                }
            }
        }
//        macosX64("macos") {
//            binaries {
//                framework {
//                    baseName = "KmppBase64"
//                }
//            }
//        }
    }

//    if (isWindows || isMacOS) {
//        mingwX64("mingw") {
//            binaries {
//                sharedLib {
//                    baseName = "KmppBase64"
//                }
//            }
//        }
//    }
//
//    if (isLinux || isMacOS) {
//        linuxX64("linux") {
//            binaries {
//                sharedLib {
//                    baseName = "KmppBase64"
//                }
//            }
//        }
//    }

    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        if (isMacOS) {
            androidMain {
                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                }
            }
            iosMain {
                dependencies {
                }
            }
//            macosMain {
//                dependencies {
//                }
//            }
        }
//        if (isWindows || isMacOS) {
//            mingwMain {
//                dependencies {
//                }
//            }
//        }
//        if (isLinux || isMacOS) {
//            linuxMain {
//                dependencies {
//                }
//            }
//        }
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn 'linkDebugTestIos'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getTest('DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', '--standalone', device, binary.absolutePath
        }
    }
}
